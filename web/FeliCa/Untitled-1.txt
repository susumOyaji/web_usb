

接続
USBデバイスへの接続から始めましょう。私はすでに私たちのウェブサイト用のHTMLとCSSファイルを作成しました。
あとは、すべてをつなぎ合わせる JavaScript を書くだけです。

ただし、HTMLファイルには、覚えておく必要があるいくつかの小さなことがあります。

ID を持つ 3 つのボタン 、および .connectButtondisconnectButtoncolourButton
ID を持つ div 。connected
ID を持つ color 型の入力。colourPicker
IDを持つ2つのスパンとdeviceHeartbeatdeviceButtonPressed.
JavaScript コードで最初に行うことは、これらの要素をすべて宣言することです。

const connectButton = document.getElementById('connectButton');
const disconnectButton =
                   document.getElementById('disconnectButton');
const colourPicker = document.getElementById('colourPicker');
const colourButton = document.getElementById('colourButton');
const connect = document.getElementById('connect');
const deviceHeartbeat = document.getElementById('deviceHeartbeat');
const deviceButtonPressed =
                    document.getElementById('deviceButtonPressed');
これで、それらとデバイスで作業を開始できます。
デバイスに接続し、構成を選択し、インターフェイスを要求する必要があります。


let device;
connectButton.onclick = async () => {
  device = await navigator.usb.requestDevice({
    filters: [{ vendorId: 0x2fe3 }]
  });
  await device.open();
  await device.selectConfiguration(1);
  await device.claimInterface(0);
  connected.style.display = 'block';
  connectButton.style.display = 'none';
  disconnectButton.style.display = 'initial';
};
上記のコードでわかるように、デバイスをグローバルスコープで宣言しているため、接続するとコードの他のすべての部分でアクセスできます。また、デバイスから切断できるようにしたいと考えていますが、その部分はメソッドを呼び出すことによって行われます。.close()

disconnectButton.onclick = async () => {
  await device.close();
  connected.style.display = 'none';
  connectButton.style.display = 'initial';
  disconnectButton.style.display = 'none';
};
http-serverを使用してこのコードを実行し、デバイスの接続と切断を試みます。接続すると、ブラウザタブの閉じるボタンのすぐ横に小さなUSBシンボルが表示されます。


LED の点滅
私たちが最初に新しいプログラミング言語を学ぶとき、私たちがいつも最初にすることは "Hello World"プログラムを書くことです。
電子機器に相当するのはLEDの点滅です。
デバイスに接続したので、LEDの点滅を開始できます。

カラーピッカー入力は、色の16進値を提供します。これをRGBに変更する必要があります。

const hexToRgb = (hex) => {
  //start at 1 to avoid #
  const r = parseInt(hex.substring(1,3), 16);
  const g = parseInt(hex.substring(3,5), 16);
  const b = parseInt(hex.substring(5,7), 16);
  return [r, g, b];
}
その機能が整ったので、カラーデータをデバイスに送信できます。USB経由で転送するには、データを符号なし整数配列に入れる必要があります。デバイス ファームウェアは、番号 1 をデータ配列の最初の要素として想定し、その後に 3 つの色番号が続くことを想定しています。ボタンをクリックすると、次のことを行います。

colourButton.onclick = async () => {
  const data = new Uint8Array([1, ...hexToRgb(colourPicker.value)]);
  await device.transferOut(2, data);
};
このメソッドを使用してエンドポイント番号 2 にデータを送信しています。LEDの色を変えるために必要なのはそれだけです。コードを再度実行し、LED の色を数回変更します。transferOut

データのリッスン
最後にやりたいことは、デバイスのボタンが押されたときにリッスンし、それをWebページに表示することです。これを行うには、次のようにメソッドを実装する必要があります。listen()

const listen = async () => {
  const result = await device.transferIn(3, 64);
  const decoder = new TextDecoder();
  const message = decoder.decode(result.data);
  const messageParts = message.split(' = ');
  if (messageParts[0] === 'Count') {
    deviceHeartbeat.innerText = messageParts[1];
  } else if (messageParts[0] === 'Button' 
             && messageParts[1] === '1') {
    
    deviceButtonPressed.innerText = new Date()
             .toLocaleString('en-ZA', {
               hour: 'numeric',
               minute: 'numeric',
               second: 'numeric',
             });
  }
  listen();
};
エンドポイント 3 でリッスンしており、デバイスが 64 バイトのデータを送信することを期待しています。デバイスは、次の 2 種類のメッセージを送信します。

デバイスのハートビート。これにより、まだ接続していることを確認できます。
ボタンが押されたとき (1) および離されたとき (0) のボタンが押されたメッセージ。
ご覧のとおり、私たちはそれ自体の中からlistenメソッドを呼び出しています、これは私たちがメッセージを受け取るとすぐに次のメッセージをリッスンし始めることを意味します。

最後にやるべきことは、デバイスに接続した後にリスニングを開始することです。関数の下部に、メソッドへの呼び出しを追加します。connectButton.onclicklisten()

これで、ハートビートとボタンの押下がページに表示されます。

結論
これらはWebUSBでできることのほんの一部であり、例全体のコードはGitHubにあります。私が遊んできた他のUSBデバイスのいくつかを見たい場合は、Arduinoと指紋リーダーの例があるこのリポジトリを見てください。

最後に、nRF52ドングルを手がけたラース・クヌードセンと、それを持ってきてくれたマイク・ガイザーに感謝します。

